!pip install pycryptodome flask flask-ngrok
!pip install flask-ngrok pyngrok

from pyngrok import ngrok

# Replace 'YOUR_AUTH_TOKEN' with your actual ngrok auth token
auth_token = "YOUR_AUTH_TOKEN"
ngrok.set_auth_token(auth_token)

from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import base64

# AES Encryption and Decryption Functions
def aes_encrypt(data, key):
    """Encrypt data with AES"""
    data = pad(data.encode(), AES.block_size)
    iv = get_random_bytes(16)
    cipher = AES.new(key.encode(), AES.MODE_CBC, iv)
    encrypted = cipher.encrypt(data)
    return base64.b64encode(iv + encrypted).decode()

def aes_decrypt(encrypted_data, key):
    """Decrypt data with AES"""
    encrypted_data = base64.b64decode(encrypted_data)
    iv = encrypted_data[:16]
    encrypted_data = encrypted_data[16:]
    cipher = AES.new(key.encode(), AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(encrypted_data), AES.block_size)
    return decrypted.decode()

# RSA Encryption and Decryption Functions
def generate_rsa_keys():
    """Generate RSA keys"""
    key = RSA.generate(2048)
    private_key = key.export_key().decode('utf-8')
    public_key = key.publickey().export_key().decode('utf-8')
    return private_key, public_key

def rsa_encrypt(data, public_key):
    """Encrypt data with RSA"""
    recipient_key = RSA.import_key(public_key)
    cipher_rsa = PKCS1_OAEP.new(recipient_key)
    encrypted = cipher_rsa.encrypt(data.encode())
    return base64.b64encode(encrypted).decode()

def rsa_decrypt(encrypted_data, private_key):
    """Decrypt data with RSA"""
    private_key = RSA.import_key(private_key)
    cipher_rsa = PKCS1_OAEP.new(private_key)
    encrypted_data = base64.b64decode(encrypted_data)
    decrypted = cipher_rsa.decrypt(encrypted_data)
    return decrypted.decode()


private_key, public_key = generate_rsa_keys()
print("Private Key:\n", private_key)
print("Public Key:\n", public_key)


from flask import Flask, request, render_template_string
from pyngrok import ngrok
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes
from Crypto.PublicKey import RSA
import base64

app = Flask(__name__)

index_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Encryption and Decryption</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f9; }
        h1 { color: #333; }
        form { margin-bottom: 20px; background: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        textarea { width: 100%; padding: 10px; border-radius: 5px; border: 1px solid #ddd; margin-bottom: 10px; }
        select, input[type="submit"] { padding: 10px; border-radius: 5px; border: 1px solid #ddd; margin-top: 10px; width: 100%; }
        .result { margin-top: 20px; background: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        .result p { word-wrap: break-word; }
    </style>
</head>
<body>
    <h1>Text Encryption and Decryption</h1>
    <form action="/" method="post">
        <textarea name="text" rows="4" placeholder="Enter text"></textarea><br><br>
        <select name="task">
            <option value="encrypt">Encrypt</option>
            <option value="decrypt">Decrypt</option>
        </select><br><br>
        <select name="method">
            <option value="AES">AES</option>
            <option value="RSA">RSA</option>
        </select><br><br>
        <textarea name="key" rows="4" placeholder="Enter key (for decryption only)"></textarea><br><br>
        <input type="submit" value="Submit" style="background-color: #4CAF50;">
    </form>
    {% if output %}
    <div class="result">
        <p><strong>Result:</strong></p>
        <p>{{ output }}</p>
        {% if key %}
        <p><strong>Key:</strong></p>
        <p>{{ key }}</p>
        {% endif %}
    </div>
    {% endif %}
</body>
</html>
"""

def aes_encrypt(data):
    key = get_random_bytes(16)
    cipher = AES.new(key, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data.encode())
    return base64.b64encode(cipher.nonce + tag + ciphertext).decode(), key

def aes_decrypt(encrypted_data, key):
    data = base64.b64decode(encrypted_data)
    nonce = data[:16]
    tag = data[16:32]
    ciphertext = data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    plaintext = cipher.decrypt_and_verify(ciphertext, tag)
    return plaintext.decode()

def rsa_encrypt(data, public_key):
    cipher = PKCS1_OAEP.new(public_key)
    encrypted_data = cipher.encrypt(data.encode())
    return base64.b64encode(encrypted_data).decode()

def rsa_decrypt(encrypted_data, private_key):
    cipher = PKCS1_OAEP.new(private_key)
    decrypted_data = cipher.decrypt(base64.b64decode(encrypted_data))
    return decrypted_data.decode()

@app.route('/', methods=['GET', 'POST'])
def index():
    output = None
    key = None

    if request.method == 'POST':
        data = request.form['text']
        task = request.form['task']
        method = request.form['method']

        if task == 'encrypt':
            if method == 'AES':
                output, key = aes_encrypt(data)
                key = base64.b64encode(key).decode()
            elif method == 'RSA':
                rsa_key = RSA.generate(2048)
                public_key = rsa_key.publickey()
                output = rsa_encrypt(data, public_key)
                key = rsa_key.export_key().decode()
        elif task == 'decrypt':
            key = request.form['key']
            if method == 'AES':
                key = base64.b64decode(key)
                output = aes_decrypt(data, key)
            elif method == 'RSA':
                rsa_key = RSA.import_key(key)
                output = rsa_decrypt(data, rsa_key)

    return render_template_string(index_template, output=output, key=key)

# Start ngrok and print the public URL
public_url = ngrok.connect(5000)
print(" * ngrok URL:", public_url)

if __name__ == '__main__':
    app.run()
